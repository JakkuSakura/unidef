type list(content: type);
type string;
type enum(variants: list(string));
type tuple(types: list(type));
type option(content: type);
type result(ok: type, err: type);
type record;
enum bit_size {
    B_8,
    B_16,
    B_32,
    B_64,
    B_128,
    B_256,
    Unknown,
    Unlimited,
}
type numeric;
type integer(bit_size: bit_size, signed: bool)
    is(numeric);
type real is(numeric);
type decimal(precision: int, scale: int) is(real);
type float(bit_size: bit_size) is(real);
type class;
type struct(
    fields: list(field),
    derive: list(string),
    attributes: list(string),
) is(class);
type dict(key: type, value: type);
type set(content: type);
type byte is(integer(B_8, false));
type byte_array is(list(byte));

# TODO
